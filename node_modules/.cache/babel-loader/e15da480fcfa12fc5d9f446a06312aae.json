{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\developement\\\\games\\\\react\\\\to-do-list\\\\src\\\\components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport Button from \"./Button\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    newTask\n  } = _ref;\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (!newTaskContent.text || !newTaskContent.date) {\n      alert('please fill all the fields');\n    } else {\n      newTask(newTaskContent);\n    }\n  };\n\n  const [isCheck, setIsCheck] = useState(false);\n  const [newTaskContent, setNewTask] = useState({\n    text: '',\n    date: '',\n    reminder: false\n  });\n\n  const isChecked = () => {\n    const newCheck = document.querySelector('.check-icon');\n\n    if (!check.checked) {\n      setIsCheck(true);\n      newCheck.classList.add('active');\n    } else {\n      check.checked = false;\n      setIsCheck(false);\n      newCheck.classList.remove('active');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"passive\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"task\",\n      children: \"Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add Task\",\n      id: \"task\",\n      value: newTaskContent.text,\n      onChange: e => setNewTask({ ...newTaskContent,\n        text: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"date\",\n      children: \"Day & Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime\",\n      id: \"date\",\n      value: newTaskContent.date,\n      onChange: e => setNewTask({ ...newTaskContent,\n        date: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reminder\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reminder\",\n        children: \"Set Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"reminder\",\n        checked: isCheck,\n        value: newTaskContent.reminder,\n        onChange: e => setNewTask({ ...newTaskContent,\n          reminder: e.currentTarget.checked\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"check\",\n        onClick: () => isChecked(),\n        children: /*#__PURE__*/_jsxDEV(FaCheck, {\n          className: \"check-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"fm1eApGNdd4WECiPZnpE49ePnL0=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/projects/developement/games/react/to-do-list/src/components/Form.js"],"names":["Button","FaCheck","useState","Form","newTask","onSubmit","e","preventDefault","newTaskContent","text","date","alert","isCheck","setIsCheck","setNewTask","reminder","isChecked","newCheck","document","querySelector","check","checked","classList","add","remove","target","value","currentTarget"],"mappings":"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","sourcesContent":["import Button from \"./Button\"\r\nimport { FaCheck } from \"react-icons/fa\"\r\nimport { useState } from \"react\"\r\n\r\nconst Form = ({newTask}) => {\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(!newTaskContent.text || !newTaskContent.date){\r\n            alert('please fill all the fields')\r\n        }else{\r\n            newTask(newTaskContent)\r\n        }\r\n    }\r\n    const [isCheck,setIsCheck] = useState(false)\r\n    const [newTaskContent,setNewTask] = useState({\r\n        text : '',\r\n        date : '',\r\n        reminder : false,\r\n    })\r\n    const isChecked = () => {\r\n        const newCheck = document.querySelector('.check-icon')\r\n\r\n        if (!check.checked) {\r\n            setIsCheck(true);\r\n            newCheck.classList.add('active')\r\n        }else{\r\n            check.checked = false;\r\n            setIsCheck(false);\r\n            newCheck.classList.remove('active')\r\n        }\r\n    }\r\n    return (\r\n        <form className=\"passive\" onSubmit={onSubmit}>\r\n            <label htmlFor='task'>Task</label>\r\n            <input type='text' placeholder='Add Task' id='task' value={newTaskContent.text} onChange={ (e) => setNewTask({...newTaskContent,text: e.target.value})}/>\r\n            <label htmlFor='date'>Day & Time</label>\r\n            <input type='datetime'  id='date' value={newTaskContent.date} onChange={ (e) => setNewTask({...newTaskContent,date: e.target.value})}/>\r\n            <div className=\"reminder\">\r\n                <label htmlFor='reminder'>Set Reminder</label>\r\n                <input type='checkbox' id='reminder' checked={isCheck } value={newTaskContent.reminder} onChange={ (e ) => setNewTask({...newTaskContent,reminder: e.currentTarget.checked})}/>\r\n                <span className=\"check\" onClick={() => isChecked()}><FaCheck className=\"check-icon\" /></span>\r\n            </div>\r\n            <Button  />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form"]},"metadata":{},"sourceType":"module"}